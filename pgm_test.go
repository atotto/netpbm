// Test PGM files

package netpbm

import (
	"bytes"
	"compress/flate"
	"image"
	"testing"
)

// pgmRaw is a complete, raw PGM file, compressed with Flate compression.
const pgmRaw = "\x9c\xd7kLS\xe7\x1b\x00\xf0\xc4\xfc\x93\xbf!\xfb\xb0d_日\xcb̾i\xe2\xa6.1\x99\xd1l:\xb7DW\x8dq\x9b\x9al\x8bb\x86\x1a\x8a\xd4ju\xe9V-\x14\xaaB\xb1\xad\a\xac\xf4Bk/\xb4\xf6zJ\xdb\xf3\x9e[[\x14\xb3\x91y\x99\x1b\xc4,\xb0dCd\x902\xc6ʀr9+-uT\xcfyρ\xe7\v=o\xce\xef9\xefyx\xcf{\x11o*{C\xf4\u07be\x1d\xdb\xf7\u007f\xbco\x8b\xe8\x83\x0fw\x8bE\xe2=\xbbE;+N\x9e.\xaf\x16\x1d(\xaf\x96VH*E\x1b\xd6o(ۼQ\xb4yc\xd9[\x9b6\x951\\17\x9d\xbd\xef1 z\a1>\xc3\xccMP\xe1\xf4\x1c\xb3\x8cxr\xe7\x9a\xda`\xba\xa2>[\xdb*w\xf5\xa0jD\xfb\xa5sB\xb0\x1e\xecF\x10\xda\xd7\xd0\xd8\xcf0\u007f\x04\x9b\x8d\xf5U\xd7[\xacɆЌ@Nz\xda\t\xca}\xeeQ\xe1*\xa3\r7\xad۶\xdeL6\xff%Hgl\xf6\x0e\x80\xd12*\u007f5!\x15k\xe4\xf4յ/\xb7%Z\x05\xf9\x9f\x9a\xc2X.\xc2\xe6\x91\xfc\xa5|\xf5+;\xeap\f\xddis\x87\xa7\xf8\xf5\xb8B\x96X\xe0\xc0\xea\xcf\xe6\x1b\xaa\xff\xbfVf\xf2\x02\xacㄦ\x97W\xcf\xf5\x94\xab\xbc\xb6\x9b\x0e\x14\a\x0eg&\xdf4pd\x97;\xd0\x0e0\x10>}\x9f\x8f\xcf\xdeV^p\a;I\xd4e\xa2\x80\xeeI\xb1\xf9O$\x9e\xeb\x11a\xbf\xc2\xf3\x0f\x9cO5\x9d\x88\xce/\xfc\x9aFm\xb4\xfev\xb1\xfd\xae\x8eXx%\xaa1\n\xf7\x03uMD\xfe\x87g\xbfVJ\x83o~)4\xf7*\xb1B\x10g\xe0\xfe\xac\xbf\xfd\uf17f\xa9\xb5\xab\xb6\x9c6\x12\xa4\xda2\x96K\xda\u0588\x17\xbd\xa9\r\xc6q\xb9ӝ\xef=\xf5\xda\xff\x14\xed5\x84\xff\x16r\xe8ؙS1\x02+F\xf2\xf0<\xa7\x1e\xea\xdd\x171\x17\xf2O\xa9v\x9dO+\xbf~\xfb\xf5\xad\x1e\x9b\x9f\xc6\xfe\v\xa2\xce\xcf\xc5\xef\xe9\x8d{i\x97w\xbax\xfd\xdb\xd6\xd5/\xad~GV%\t,\xf1\x18.\xe1\xe0?W\xfa\xba\x8eSq\xeb`\xb1Awp՚\xbd\xbaVK\xa5q\xa9\a\x17\x9e\xb2\xf2\x19S\xe5\x9d\xc6\xf7\x93\xb8ټ\xf8\x91;\x15\x15\x97\x1a\x9aͭ\xd7\x0e\xb5-\xf5\x98\xd7\xc2\xea\xa74M\xeeW\xdfMbd\x8bra\xd4M\xd6~k\x92\xb5\x1a\xd5b\xd9\xe1kx\x89\x0f\xeb\x87X\x9f\xef\xbcҹg]*W!\xfcT\x8d\xe6\xea\xc5\x10i<\x8e\x9c\xf5Fg\x1e\xb5\x94p\f7\"\xac\x93@\xe71\xe2\xfb\xaf\xf2\xa5\xa6)\x92\xa4\x00\x16>/?\x98\x9d\x8f3\x1eoi\x82\xa8\x84d\xf3iU5r\x8eXZ)\x1cX\xba\x98G.{\xb0ԓ\x88d\x9c-\xc1\xc8C\xe2\xb3 (\xbdU\x9ep\xa9C\xf1R\x8f\xd1\xe2!\x8eowXC\x96\xdc\tP4\x16\x03\xcfq\x8c\xd2Hm\x01\u05efl\x19t\x04& \xc0e\x86\xb9\x8d\xb2M\xe6\x01\xab\x90\x04ɣ\x83cwh\xb6\xe7\x8f\xca)\x01\x9e>w\x14O\xa6\xd9|6\xea\x00\xfc\x9e4\x94s}D}f\x92\xeb\xa5\xf1g\xe3\x10D\xde\xe4\xf2\x13v'{\a@\xc8b{\x96!\xb1&Õ \x82p\xbc\xb32\x8e\xea͋\t\x12\xdb\xfb9g\x91\xeb^\xf6\xe7\xdbs\xb3\xab\xdfU\xe8\x1c}\xb0\x93ӏ\xd4\xc7ټ\xde\xd4\xdd3\xa6\xbeY\xf0\xa4\xcc\xca=\t\xa6*R/rDq\xc3bhӡ\x8bߠN\t\x99E\xabj\xe8\xe7y\xdc\x17\xc2\xf1\x887\xbaX[\xe0Q\xc3\x16\xc0m4\xdf\b\b\xd5\xc1\xa6\xf1\xa8\x8ag\x14\x02\xbf\x13\xe6\xc7T$\x8f\x0fX`~\xc2\ue0cfbૅ.\xc2\xfez\x9e\x0e\x04/B\x97\xc1\xe01x\x01\x80G\v\xf5\xdfIQ\xa8\xc7o\xd8\xe0\x9b7\x85\rZ\x00R\x01߈\xfc\xa36B=ur\x00\xbe\x0f0\\\x87\xfa\xe4\xae,\xdc;LP\x9f\xd8ͳ\x8d\n\xd9a\x1eD\x8f\xf0x\x14\xea\xa9\x1a\a\xdf\xf3\xa1\xf5O~\xde\xc7\xe3\x8d\xd0\xfa\xe3'\xee\xf5\x8cB}\v\xcc'\xd4w\x99\x9e\xe48̻\xac\xdc\x1e\x0f|\xd4ǌk\x1f\xc0<pq\xfbxu,\x88L^\x85\xbe@\xaa\x9d\x93w\xa8\x02\f\xd3\xe5\x84W\xb0_\x13\xe1X\x84n]\x8e\b8AP\x97X\a\x00\xe5k\xae\u007f(\xe4\x04\U00098507_\xdc7\xe0\xba:\xff\xa4\xa0\x03P6=p\x1e\x94l\x05\x00\x9d\xac=\x15\x19\x10~\xfc\x1b\x95:h\x82\\\\\xf0\xf0DXr\xc0?9\xbb\x9c\xf3c\xbaJf\x906\x83x,\x16\xed\xd0}\xfaI\x17\xb3ܘ\xf3\f3ɣΆ\xfa\vjK\x86Y~<\xee\xce\xed*\xb5\x0f~\xfc\x9dYQd\xa2O\x99A'\xb3\xe2\x18\xd6w3\x17\xa7W\xeeg\u007f\xa8\xfd\" \xe0\xbe\u007f\x03\x00\x00\xff\xff"

// pgmPlain is a complete, plain PGM file, compressed with Flate compression.
const pgmPlain = "\xdc[[n\xdb\xc8\x12\xfd\xefU4\x90\xff\x80\xfd\xaaf\xaf\xe0\xfeޏ\xbb\x01\xe7\x8efb\x8c\xe3\x01&\x1ed\xfbsN\x15%\xcb2\xf5\f\x1fr\x020\xb2%\x8afU\x9d:\xf5\xe4\u007f\xa3\xfb\xe4\xff\xf7\xf5\xf1\xbb\xff\xfd\xf1i\xe3\xbf>|\xf7\x0f\xfe\xdb?O/\x8fO\x8f\xcf\x1b\xff\xff\xbf\xbe}\xdb<\xbf|\xfe\xfc\xd9\xe1<\xbc\xf8\x1f\x8f/_\xfd\x97\xa7\x87\xe7?=\xcf\xf8\xee\x1f\x9f\xfd\x97\xcdˏ\xcd\xe6\x19\xe7H\xf2R\\\xad\xd5\xe9\u007f8\xfc\xde\xeb\xe1\xcfc\xbf\xeb\x81\u007f\xa3\xef\xeb\x85\xfd\xc1\xbf\xf7'\x05_K\xf3U\xa2\x97\x14|\t\xbd\xcf%\xe0\xa8>\xe7ޗ.9_j\xf25\xe1d)\xaf_\xca\x15\xef7_r\xf45F{o\xfc.\x8e\xde\xf9\x95Ǥא\xd6{\xe9:\b\x9a}\xee\x06\xa1+^c\xd5\xdf\x13\xac\x93\xbb\x82\xf7\n~\x16(\xa2\xc1Z\x11\xf2\x16g\xe7\xe3\xbc$>6~&\xaa\x8f\xb5d\xb9\xf8肗\xd0\xec\xdeq\x94>\xbaBy\x13\xf4\x90\x80\xc6*\xaf\xe7\x86\xce\x17ȗ\x05\x9f\t\xbe\x13\xb2O\x19:\x12\xbe\a\xdd\xf4\x00\a\x0e|ו\xd4\xf6\xb0\xb1\xbem\x0f\x8f\x02\xb9\b\xec\x12\x8abYq\x1b\"\xec\n\x9b\xe6t\xfc\x1a\xf8\x8c6&\xc63d\f\xf0\x81Њ\x0f\x19:\xe9\x83^\x97\xfa\xa9)\xdf\x1f\xd6sr\xb9\x01\xdb\r\xf2\x13\xb7\x82Wɴ\xb9O\xc5|w\xfc{\x15\x9fw>f|7T\xa7\xd8\xc7w2t\x10\x80\x89\f(4\x88ޛk\x1c\x88\xbe:\xdc%\x8b\x9a\x8a&Sq\xf7\x8f\x1c\x1d\xcdV\x83\x8c~\x97\xa2Fj\xc8G\n\x1ah\xe0n\xf8f\xc1{\x00\x03\x14\n\xe08%\xbd\"\xf7\x01x\x802A*5*\xac\xf2Nj\x18^\x9d\x15NN\x96\x1f\xbbF\x82\xd1cP\xfb\xf22\xe4\xc1\x82\xdfw\x98\x01~R\x14\xe2\x01\x1cX\xee\x80ςrq\"O\xb7\xa6\xf7\xaa\xa6\xe9\xc0E]Rs\x99\xe9\xaa\xd7ߕ\x9f\xd38`\xe0ϩ\x8b\x10\xdf8\xa1\xa4\xe4\x94'\xb6\xb2\xf35\xd3g\x92\x06\xc8U\xf9L`\x17\xf8sj\xb0SK\xc3\xfd\xc2?);9\x8er#N\xa9\xfd\xc8qR]\xc6{\x8cug\xff^\xb4\x98V$\xbc\x85O%\x8fT\x8d\x8bWƸ\t\xf5\x81\xfbh\xc1ѱ\x89â\x18\x1c!\x9e\xd2T\a\x8a\x05\xe5,\xd3\u05f9\xfb\x10\xe0#\xe7!6\x1c\xba\x0f\xf4\xc8\xd8X^q\xbf(։OR\x91\x92Z\x1d\x8fU\x8cm\xb1\x88\xc6*r7e'nS\x9f\xbdȉk\x97∥\xf7\x94\xf1\xc6\xfe \xc6n\x15rg\x0eFڢ?\xd6\xfc\xfe\x1e\x80\t\xe5,\xf1\x81g\x17 U\xda\x10\xe1Ų:h\xa0\xeey\xadj\xb3\x05\xb3h\x1d\x95\xdc\xedK\xae\x19a\v\x8b\xa2\x9d\xf7\x85P\xe4\xc8Z\xf4\xf01\xa4\x13\x95\x14>*\xf5S?\x19\x1c\xa6\x92S_\x88b\xf4\xe5\x88;I\xc0\x0e\xed\x972y\xbc\x1f\xc7\xf8\u0601\x90\x11{\xea<Ϗ\xf7\xce\xe2J$vs\xaf\xb9Ո\xd6\xed\x1a\xc099\x9f|\x9d\xaa\xd5\x1eʇHF\x02\xae\x11\x90\u31beY!C\x1eH[\u007f8\xb0\xee\x19\xcck\xf8Oݬx\x17r.\xe5\x05jc\xaev\x9f\x9d\xc53-\xca\xce\\C 'e\x85\xb9\x91\x04\xe0\xff\x80\x00\xc1\x00\xceD=%\xc6\xfc\xb3\xc6~\xaf\x10\xc2/\xf5\xb3\xc1]\x90A\xa6\x04\xb2\x8d$^\x90KԄ\xdc1\xf00Oa\x91r\xee\x1a$\xeb\b\xb7@X\x17\xd5\x1c\xdf@:\xea\xe8Ｘ\xf2\xc0%\x96>H\x94\x10U]\xed\xf2\f\x91\xbb(\x97\xf0\u07b4\xea\x84abW\xd5˨pE<S\xd3\xd7*\xfa\xdd5\xc8\a\x9a\xe8E\x9cσU\x9b\f\xdf\x05\xfaY\xc9F*\xa7\x85\xebо=\x98E\xf5yz\xb4\x17q\xcc\x1c5\x82\x91\xcf\x12@+&\xba䡈J\xea\xc4\uf4b4bEx\xea5)u\x96\x9c\x9ayI\xef,R\xf8\x1e\x89\x8a\xe2\x1f\xa1\xf4\xd3x\xb7\xca@\x1d\x91D4)ޥ\xa8٘<1I\x8b\xf0+\x16\x91Lf\xf6\xc9F}\x8e\x05\x17H\\Uń\x93\x8d\x05\r\xfa\xa2\xf2\xd2OH\xea\x1a\x14\x99\x9c#x\xf3\xfa,`\xa9\xbf\xeb\xe1>\xe8\xa3\x0e\x05~\xa9\xb7\x16\xf1\xc7\voȜ\xb4\x8eB\xf2\x8c\xaa+\x85\xbaO\xc6{\xc1\x065U5Y\xedh\xaf\t8uQ\xa3Ug\f\x85b!\x91|\xb1M~\xacX\xb9\x12\xee\xdb\x03AC\xb9Қ\x1f\xd3\x05;\rLMk+\xb3[\xbb<\xf8\xeed\xa9\xbbB\x86\xaeI\xbe4\x0eM\x96賸g\x01p\r\xd6\xdfp\xbdؽ\x91\xef\xd3ĩ\f\xec-\xc4:\n\x88X\xc3p\x9f\xf56\x9cV\x19\x1a\x11C\x81\xd3\xf5\xe6\x1b\x87\xc5ʵ\xbe\x0f,\x92C.\xf4\xfb\x1b\xf4\xc1nCR\x9fV\\\xdfB\xcbZ\x80\x16;\x98\xc0\xf1@aw\xa3\xbf\xef\x176J\xcb,\x18,Q2LIm\x93\xc6\xfe\xa3\x85\xd558\xbdŶ\x17\xe85Ǽ\xc7U\xd0i.\xe7\x1a\xd9W\xe9\x83:\xd5\xdeKM3\xcbr\xe55pO\tqUs-\x94GLI\xe8\v\x93\x86\xfeX\xac\x8c\xa9m\x05۞\xb8Fo\x8d_ʯ\xdcʜ3Ɖ\xe3~Ը\xa2ͧ\xb7\x9c\xb7\x12\xd6\xf7\xf9>\xb0q6kQ',\xa0\x86\x06\xf9\xbc\xb6\xd5\xf8\xe8.\xc8\xfb\x06\x1eE\xfe5\xde\xfd\x9dN\x1f\x8c\xf7\xcd\xd2\xf5\x1b❻Xn\xc4?\xe6\x04\xcaݔ\xffU\a\xe3\xd7@\xec\xac\xc7\xfb\xa0S\xa9D\xeb\xf7R\xe7\x83{o\xf5\xbe\x86~V}C\xbf\xe0$\x04\xfa\xe2\x02\xe7}u\xfe\x96=\xe7cC::\v\xdc\x01-\xf7\xa6/\xca\xfeF\u05ceC\x8d)\x8e\xf6O\x17\x98Q\x05\xd19\xe1\x15i\xd9\xc5\xfaP;\xa3\x82\xe6\xfc\x92\xbd\u007f\x86-M\x03\xd9\xf3?&{\x15\x9bg\xf4\xfd\"\xfdz\xf6#Y\x9d\x97\x16&\xa3vMϵ\u008f\xe6\xee\xc5zcy\x9b\x12\x1e\xbb\x06\xcb:|\xaee\xf5B\xfdz\x9d\x0f\xb3\x0fi%\xdeOb=\xb0E\xe4\xac\x04\x1e\xe8-\xf7\xdb\xd2\xf7\f\xb5ZYH|,֯\x1ffã\xe5\xedҡ\x9f\xa1!\x84E\xfb\xf5ZFs\x16wy\xba7\x83>\xea\xc0\x87\xb2\xec(6\x05g\xb2ˊi\xae\x96\x1bn\xa4\x837\xaf\xefo\xd3\x1d\xb6\xb8\xa4\xae\x94\xe6\xda\xdfg\xabpѹ\xb4\xd8X]c\xdei\xdbϫ\x0f\xce\xfd\x9a,>\x97ֿ\xab\xed\xbd\xb6RI7\xf0|\x92\xc5\xe7\xd2\xc2ٛΫ\xca:%\x1d\xe3;s\x82\u05fcn\xb9\xb9t\x17,'iy,\x0eϯ\x8fj\x93\x903\xfb\x18\xf3\xe8\x83\xed\xb2\xae\x1f&Lu\xf98W9\nh:\xc9^c\xe5H\xf3O\xf9\x89V\xee\xcf\xe8\x833\xe9\xa0˪\xab\xecر\x9d\xa3\xbb5k\xc49\x94\xef1\x95\xd5\x16\xec4\xa7l\xf5\x9c\xdd\xe7\xc9\xe9\x8a\xedh\xad\xb5Oj;Eu\xc6v\xce\xd1\x16=\xeb)\xddi[k\x9f\xd4잧\x199\\\xa3\x0f\xdd?i\xdaJ\\k\xd7PǢ\xc7y~>}p\x1c\x1cE\xf7C\xb4\xd7\x11\xcb\xe2qNw\xbc/\x8fq\xd3裷\xddz\x19\xea7ݷ\uf3ce&g\xd3G\xe9\x9aӱ\xcd\xed1\xee:}\xb0\xb7\xc1\x8d\x10\xd8y\x87\xf7\xa4\xcf\x178I\xcb\xd6s\xb63\xdb\x16\x1c[\x04\x1d\x91\xebX3\xd98Z\xd7>\xf2(\xee\xe7}N\xa0\xd9.\xdd\"X/\xd1z\x06)\xed\xed\xa1ڮ\xf2\b\xe7\xcd\xee\xfb\xec\x8d\xeb\x98:\xf73a}Xe\xe0n\"\xb7\xecs\u007f7\xcf\bi\x9c\xe5F\x95\xc5\xf8\xc9\xf3u\xedM\x88\xf5\t$\xdd\xd73B\"6\xa6\xd3\xf5\x8a\x1c\xa7\xa9\xe7j\xdb\xf5\x9f\x87=JG\x9f\xbe\xa7翶cZ\x8e~\xf5\x19\x80:\xc8^oX\x99\x94a\xad\x89\xcfCq]-\x1b\xbeO\xd4h\xf7\xf5<\x1cG\xf5\xece\x90\u007f\xfa\xb8۠>9S\xd3\xd1yчj\xb8>\x149\xf2\xe6\xbe,\xed,\xfd]=\xffu~U!\xda\xcal\xb1\xfaVWbdx~\x84\xfe\xb1]\xbb\xe1ܡD[?\x15\xca\\v+Y\xf7\xfc\xac\xe3%kJ\xec\xa3qUI\xf9pX\x0fA,ry\xe8o\xf2y\x93\xddF}N\x1fǶ\xe7\x9e\xfd\x10{&r\u007fe\x91\xfdD\xe6]\x92;\xf8p\xfc\xe0\xb6=\xfe|\xa0>Ӳ\xddv\xeeµs\x93\x8f\xab\x0f\xae\xe4\xe5~gw흗\xf6\xeb\xd8\xf6\xcc\xccBb\xd18\x15\xf9\fYJ\xbf\x96m?\xe65\xdc'\xff\x9f\x87\xbf\xbf<\xfc\xb1\xf1\x0f/~\xf3\xfc\x9b\xfb7\x00\x00\xff\xff"

// Determine if image.DecodeConfig can decode the configuration of a raw PGM
// file.
func TestDecodeRawPGMConfig(t *testing.T) {
	r := flate.NewReader(bytes.NewBufferString(pgmRaw))
	defer r.Close()
	cfg, str, err := image.DecodeConfig(r)
	if err != nil {
		t.Fatal(err)
	}
	if str != "pgm" {
		t.Fatalf("Expected \"pgm\" but received %q", str)
	}
	if cfg.Width != 64 || cfg.Height != 64 {
		t.Fatalf("Expected a 64x64 image but received %dx%d", cfg.Width, cfg.Height)
	}
}

// Determine if image.Decode can decode a raw PGM file.
func TestDecodeRawPGM(t *testing.T) {
	r := flate.NewReader(bytes.NewBufferString(pgmRaw))
	defer r.Close()
	img, str, err := image.Decode(r)
	if err != nil {
		t.Fatal(err)
	}
	if str != "pgm" {
		t.Fatalf("Expected pgm but received %s", str)
	}
	_, ok := img.(Image)
	if !ok {
		t.Fatal("Image is not a Netpbm image")
	}
}

// Determine if netpbm.DecodeConfig can decode the configuration of a raw PGM
// file.
func TestNetpbmDecodeRawPGMConfig(t *testing.T) {
	r := flate.NewReader(bytes.NewBufferString(pgmRaw))
	defer r.Close()
	cfg, err := DecodeConfig(r)
	if err != nil {
		t.Fatal(err)
	}
	if cfg.Width != 64 || cfg.Height != 64 {
		t.Fatalf("Expected a 64x64 image but received %dx%d", cfg.Width, cfg.Height)
	}
}

// Determine if netpbm.Decode can decode a raw PGM file.
func TestNetpbmDecodeRawPGM(t *testing.T) {
	r := flate.NewReader(bytes.NewBufferString(pgmRaw))
	defer r.Close()
	img, err := Decode(r, nil)
	if err != nil {
		t.Fatal(err)
	}
	if img.Format() != PGM {
		t.Fatalf("Expected PGM but received %s", img.Format())
	}
}

// Determine if netpbm.Decode can decode a raw PGM file with non-default
// options.
func TestNetpbmDecodeRawPGMOpts(t *testing.T) {
	r := flate.NewReader(bytes.NewBufferString(pgmRaw))
	defer r.Close()
	img, err := Decode(r, &DecodeOptions{
		Target: PGM,
		Exact:  true,
	})
	if err != nil {
		t.Fatal(err)
	}
	if img.Format() != PGM {
		t.Fatalf("Expected PGM but received %s", img.Format())
	}
}

// Determine if image.DecodeConfig can decode the configuration of a plain PGM
// file.
func TestDecodePlainPGMConfig(t *testing.T) {
	r := flate.NewReader(bytes.NewBufferString(pgmPlain))
	defer r.Close()
	cfg, str, err := image.DecodeConfig(r)
	if err != nil {
		t.Fatal(err)
	}
	if str != "pgm" {
		t.Fatalf("Expected \"pgm\" but received %q", str)
	}
	if cfg.Width != 63 || cfg.Height != 65 {
		t.Fatalf("Expected a 63x65 image but received %dx%d", cfg.Width, cfg.Height)
	}
}

// Determine if image.Decode can decode a plain PGM file.
func TestDecodePlainPGM(t *testing.T) {
	r := flate.NewReader(bytes.NewBufferString(pgmPlain))
	defer r.Close()
	img, str, err := image.Decode(r)
	if err != nil {
		t.Fatal(err)
	}
	if str != "pgm" {
		t.Fatalf("Expected pgm but received %s", str)
	}
	_, ok := img.(Image)
	if !ok {
		t.Fatal("Image is not a Netpbm image")
	}
}

// Determine if netpbm.DecodeConfig can decode the configuration of a plain PGM
// file.
func TestNetpbmDecodePlainPGMConfig(t *testing.T) {
	r := flate.NewReader(bytes.NewBufferString(pgmPlain))
	defer r.Close()
	cfg, err := DecodeConfig(r)
	if err != nil {
		t.Fatal(err)
	}
	if cfg.Width != 63 || cfg.Height != 65 {
		t.Fatalf("Expected a 63x65 image but received %dx%d", cfg.Width, cfg.Height)
	}
}

// Determine if netpbm.Decode can decode a plain PGM file.
func TestNetpbmDecodePlainPGM(t *testing.T) {
	r := flate.NewReader(bytes.NewBufferString(pgmPlain))
	defer r.Close()
	img, err := Decode(r, nil)
	if err != nil {
		t.Fatal(err)
	}
	if img.Format() != PGM {
		t.Fatalf("Expected PGM but received %s", img.Format())
	}
}

// Determine if netpbm.Decode can decode a plain PGM file with non-default
// options.
func TestNetpbmDecodePlainPGMOpts(t *testing.T) {
	r := flate.NewReader(bytes.NewBufferString(pgmPlain))
	defer r.Close()
	img, err := Decode(r, &DecodeOptions{
		Target: PGM,
		Exact:  true,
	})
	if err != nil {
		t.Fatal(err)
	}
	if img.Format() != PGM {
		t.Fatalf("Expected PGM but received %s", img.Format())
	}
}
