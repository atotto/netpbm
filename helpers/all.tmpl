{{- /*
This is a Go template file for declaring test functions that work on
all "real" Netpbm types (PBM, PGM, PPM, and PAM, but not PNM).
*/ -}}

{{- /* Declare some commonly required variables. */ -}}
{{$lfmt := ToLower .Fmt}}
{{$Rp := "Raw"}}
{{$rp := "raw"}}
{{if .Plain}}
  {{$Rp = "Plain"}}
  {{$rp = "plain"}}
{{end}}

// TestDecode{{$Rp}}{{.Fmt}}{{.Suffix}}Config determines if image.DecodeConfig can decode
// the configuration of a {{$rp}} {{.Fmt}} file.
func TestDecode{{$Rp}}{{.Fmt}}{{.Suffix}}Config(t *testing.T) {
	r := flate.NewReader(bytes.NewBufferString({{.Image}}))
	defer r.Close()
	cfg, str, err := image.DecodeConfig(r)
	if err != nil {
		t.Fatal(err)
	}
	if str != "{{$lfmt}}" {
		t.Fatalf("Expected \"{{$lfmt}}\" but received %q", str)
	}
	if cfg.Width != {{.Width}} || cfg.Height != {{.Height}} {
		t.Fatalf("Expected a {{.Width}}x{{.Height}} image but received %dx%d", cfg.Width, cfg.Height)
	}
}

// TestDecode{{$Rp}}{{.Fmt}}{{.Suffix}} determines if image.Decode can decode a {{$rp}} {{.Fmt}} file.
func TestDecode{{$Rp}}{{.Fmt}}{{.Suffix}}(t *testing.T) {
	r := flate.NewReader(bytes.NewBufferString({{.Image}}))
	defer r.Close()
	img, str, err := image.Decode(r)
	if err != nil {
		t.Fatal(err)
	}
	if str != "{{$lfmt}}" {
		t.Fatalf("Expected {{$lfmt}} but received %s", str)
	}
	nimg, ok := img.(Image)
	if !ok {
		t.Fatal("Image is not a Net{{$lfmt}} image")
	}
	if nimg.MaxValue() != {{.Maxval}} {
		t.Fatalf("Expected a maximum value of {{.Maxval}} but received %d", nimg.MaxValue())
	}
}

// TestNetpbmDecode{{$Rp}}{{.Fmt}}{{.Suffix}}Config determines if netpbm.DecodeConfig can
// decode the configuration of a {{$rp}} {{.Fmt}} file.
func TestNetpbmDecode{{$Rp}}{{.Fmt}}{{.Suffix}}Config(t *testing.T) {
	r := flate.NewReader(bytes.NewBufferString({{.Image}}))
	defer r.Close()
	cfg, err := DecodeConfig(r)
	if err != nil {
		t.Fatal(err)
	}
	if cfg.Width != {{.Width}} || cfg.Height != {{.Height}} {
		t.Fatalf("Expected a {{.Width}}x{{.Height}} image but received %dx%d", cfg.Width, cfg.Height)
	}
}

// TestNetpbmDecode{{$Rp}}{{.Fmt}}{{.Suffix}} determines if netpbm.Decode can decode a
// {{$rp}} {{.Fmt}} file.
func TestNetpbmDecode{{$Rp}}{{.Fmt}}{{.Suffix}}(t *testing.T) {
	r := flate.NewReader(bytes.NewBufferString({{.Image}}))
	defer r.Close()
	img, err := Decode(r, nil)
	if err != nil {
		t.Fatal(err)
	}
	if img.Format() != {{.BaseFmt}} {
		t.Fatalf("Expected {{.BaseFmt}} but received %s", img.Format())
	}
	if img.MaxValue() != {{.Maxval}} {
		t.Fatalf("Expected a maximum value of {{.Maxval}} but received %d", img.MaxValue())
	}
}

// TestNetpbmDecode{{$Rp}}{{.Fmt}}{{.Suffix}}Opts determines if netpbm.Decode can decode a
// {{$rp}} {{.Fmt}} file with non-default options.
func TestNetpbmDecode{{$Rp}}{{.Fmt}}{{.Suffix}}Opts(t *testing.T) {
	r := flate.NewReader(bytes.NewBufferString({{.Image}}))
	defer r.Close()
	img, err := Decode(r, &DecodeOptions{
		Target: {{.BaseFmt}},
		Exact:  true,
	})
	if err != nil {
		t.Fatal(err)
	}
	if img.Format() != {{.BaseFmt}} {
		t.Fatalf("Expected {{.BaseFmt}} but received %s", img.Format())
	}
}

// TestNetpbmEncode{{$Rp}}{{.Fmt}}{{.Suffix}} confirms that encoding and decoding do not alter
// a {{$rp}} {{.Fmt}} file.
func TestNetpbmEncode{{$Rp}}{{.Fmt}}{{.Suffix}}(t *testing.T) {
	repeatDecodeEncode(t, {{.Image}}, nil, nil)
}

// TestNetpbmEncode{{$Rp}}{{.Fmt}}{{.Suffix}}AsPNM confirms that encoding and decoding do not
// alter a {{$rp}} {{.Fmt}} file when treated as PNM.
func TestNetpbmEncode{{$Rp}}{{.Fmt}}{{.Suffix}}AsPNM(t *testing.T) {
	dOpts := &DecodeOptions{Target: PNM}
	eOpts := &EncodeOptions{Format: PNM}
	repeatDecodeEncode(t, {{.Image}}, dOpts, eOpts)
}
