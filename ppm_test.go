// Test PPM files

package netpbm

import (
	"bytes"
	"compress/flate"
	"image"
	"testing"
)

// ppmRaw is a complete, raw PPM file, compressed with Flate compression.
const ppmRaw = "Ԛ\tL\xdbG\xd6\xc0\xa5|\x95\x12E_\xa5]\xb5\xd2vUm\x97\xddF]U[Uj\xb6\xcd\xeeF\xedn\xa26i\xb2m\x1aڒ&\xb4iK\xb8\x12RN\x1b\x8c9\x8c\x8d\x0fl\xb0\xb1\xf1}\x1f\x18c\x1b\x83\xef\x13\f6\xd8@8\xcai\xcedI/\x8e\x14\x04\xe40\xe1\n\xb0Ch\xb3Y\x02]\xa7\xf6\x9fdGO\xc8\xd8\xf3\x1f\xfff\xe6\xbd7\xef\xbdq\xf8\x81\xbdχ\xbd\xf9\xc1\x91\xc3\x11'?8\x18\xf6\xf6\xf1\x13\xe1a\xe1\xef\x9d\b;\x9a\x90\x98\x1e\a\v\xfb(\x0e\x06OHI\x0e{\xe5\xe5W\xf6\x1ex5\xec\xc0\xab{\xf7\xbf\xf6\xda\u07b5е\x95\x95\x95\xc5\xc5ť\xa5\xc5\xee\xae.\x9d\xa6\\\xc8$K\xd9$1\x83\xa0U\b]\xb5\xd57o\xdeX^^\xde\xe8v{\xce_\xefr\x9bM\xe6\xd9\xe9\x99;++k\x8f\xba\xad\xae\xad\x8d\x8d\x8d\xb546\x88Yd\x16\x1eVAG\xe8\x05h~Q\x16\r\x9f\x9d\x87H*\xc1\xc1u\x82|\x12\"ڠ\x14\x0e\r\xf4\xdbMF6>M\xc3̒S`\x89\x9f\u007f\xa8.W\xcc\xcd\xdd~\x84\xf0\xe3\xe3\xd7zڼrV\x01@\x1at\n\xbc\x1a\n\x8f\x92K\xa3R\xffy\xf5\xab\x8d\x0e\x13\xdfO\x1a\f\x86R\x0eQ\xcf\xcd\xe1\x11\xd2\xf2\x92?\xd5rP*N\xbeIL\x18v\x89\xa5Ep\x8bA\xbbtwkv\xbe\xb9kk\xedj\xbeKI\xf19\xf8\xfd5BW9\t\x8bL\xf2\xf9|\x0f\xf6\xbc\xe5\xf7\xf3\xa8\xf8V}Iiqƫ/\xed;|\xe8\xd0\xfe\x97_4\n\xf3\xfb\xab\xf92\x0e\xf9ƍ\x1b;L~\xcb\u007f[]*\xb2\xca\n\xbf4\xb1z\xec\xbcn\x1bo\xc0)\xc2\xc2Ϲ]u\x9bz\xce\xcd\xcd\xc1\xe1\xf0\xf0\xf0pr!\x89\x88\x88\x06\xddʨ\x99\u007fx\xfe\xb7\xbf\xfcœ\x16\t~\xa8V\xa4\x14Rw\x98\xbf\xbf\xaf_HE\xb7\xe8\x19\x00\xfb\x9e\xb4\xea\xe9*1crjjSg$\x12\xb9gϞ\xa7\x9ez\xeaȑ\xa3t\x02\xb2\xd7\xc1_\xefl`\x9e|\xeb\xafV)\x01l\x99ݨYXX\xdc\x19\xf2\x9b7o\xe5\xe5\xe6\x11\xe0QCu\xe2\xfb\xe1{\xec|\xab\x18kі\x03\a\xb4\xe9\x11\x18\f\xb6{\xf7\xee}\xfb\xf6ed \xcaE\x8c\x065\x19t\x06\x8f\xb4\x99X\x99\t\xa7yD\xd8\xe5\x01\xdf\x0e\x90\xdfYY\x1d\x1c\x18L\x8c\xfd\x8c\x95\x9fP\xa7.1\xc9\xc8V9\xc5!/l30\xc1\x92\x02\xa4\x1ay\x81\xb6\\\xe4\xf7\xcfmzptt4&&\xe6رc*\xb5ڦS\xb8\x95\x85\x1b\xfc\xe0/ز<X|wW7\xe4\xf0wV\x9a\x1b\xbd\x94\xbc\x94\x12t\xa2N%5\x18\x8c\x1eo\x93\xb3\xcem5\xebMJ\xaeQ\x90\x0f\x8c\xb7\xc7\xc6\x15\x95`\x81#\xddn\x90\xd9\xd9\xd9RVA\x97\x95so\xd7|\xd5\x02\x87\x8c\xc0 \x13!u\xa1+\xab\xab\x8d\r\r2j\x16\"\xe1c\xbb\xcd\x02\xfe\xbd\xffSpd9LU\x0e)\x16\x18\xa6\x82\x9e\xd5\xd4ذ\xdd8\xad\x97\x1a\xcbh\x99\x80\xf9~\xc5\x03\x13\x97\x92\xd3\x1d6\x1bt\xfcc\xa3\xa3l\x02\\FE\xbajk6}\xa4\xd1h\"\"\"h4Z.,~\xb0V\x04\x1c\x119\xf7\x8b\xcbW\xae<8\xc8\xe0\xe0\x10%/\xb1\xdbƽ\x1f\xfe\xc7]\xe0c\xd2\x13\xa0\xe3G!Қ*)&\xb5\xe8\xe6-\xff\xfd\xef{<\x1e`\x95\xbbv\xed:x\xf0`fz\x9a\x96\x8b\x02k\xdbW#`\xe1\xe1R\xa9\xf4\xfa\xf5\xeb?\xea\xff\x98B&\x92P\x80\xe7\x11<\b\xbf\xce\xef\x10\x18\x05\xe8\xd2R\x05\x14\xf0\xce\x1aW!\"\xaa\xb6\x8c\xa8SI6i\x8e\xcb\xe5z\xee\xb9\xe7\x9ex\xe2\t\x14\nUY\xa1fa\x93\x01\x89\xb7\x92V_Q\xacff\xc7G\x1eO\x8e\x8bĤǣS\xcevXؾm\xe07d\xd8%\x89\xfd䃕\xd5P\x92_\xbb\xf6=\xf0l\xa7\xde?\xd9nd\x9a\x84\x18\xa5\x8c\xbfi\xf8\x85\x85\x05\x1c\x0e\a\x1cKvv\xf6\xcc\xf4\x145/\xb1(+\xf6/\xfb\xff\x18\xf6\xbb\u07ff\xf5Ɵ\xeaUd\xbb\x94\xd0XI\x05v\xf1\x13\xe4\xf7\f\x99GH\xd6\xe9L\xa1\x82\xef\xea\xec\x161HUܼ\xb3'\x0f\x0fԊj\x15D\x93F\xb6\xb0\xb8\xb4]\xff\xd1o\xbf>\xfa\xc6\xfe\xbd{v\xef\xfd\xff'w\xef\xd9\xf3\xb7\x03/\xe1\xe1\x9f\xe5%\u007f\x9c\x9b\x14\xd9XE\xfb\xaf\xfc@\x80v\xa5%'\x85\xe6x\xed\x1fB$\xc6z5\xc5W=r\xe4\x85\xd3\xfdNQ\x97\x85S%)\x1e\x1f\xdf\xd67r\xe8\xc5\xf1g\x8e\xfd߮]\xbf\xf9\xf5\xd3g\xc3\x0f+h\x19\x06~\x9eY\x84\xc9M<\xa3\xe5\xe6\x05\xc2\x0f\x8e\x83bt\xea\xc4\xc4T\x90\xf0\xcb\xcbw\xa4b\t*\xf1\xccHC)\xf0l'\xde\xfc\xf3P\x9d\x04\x9cPF!\xa6T\xcc_\xd9JGU\xca\xf2\xe2\x9c\xf3\x88\xf3\xa7D\xa4\x14Y\x11L\xc3\xca2\n\xd1\x06>J\xcd\xc8\x04V`\x95\xe0\x03\xe1\a\xe2VSe\xd2\xd2 \xf9\x81VSHDy1\xbc\xae\xbc\xe8\xd9g\x9e>\xf2\xfa+\x80\x1f\f\xdeW-\u0530s\xf0\xe8,\xbf\xff\xdf^h~~\x9eH\xc0\xd1P\x17\f\x02\fP\x18=\x1f\xa5\xe3\xe6rqI\x91'\xdfDf\xa4E}rJ\xc5\xc8\xea\xfdI˽_@@%\xa1\x17\\\xbb6\x15\xdc\xfa/k\xcaˤ\x85iW\xeae\xa7O\x1c\xda\xffҾa\x97\xf4\x9e\x95\xf5\xday\xe8\x94\xcfȸ\\\x1a)_X\x82\xa7a\x12[t%`j@I\x90\x17>R3\x91\x05\x19QU\x95\x956\x9b\x1d\x8c\xd3\xe7\xf3\xa99\xb8n+7@\xfe^;_\xcbE\xf3\xd9,\xa0\x03\xc1L\xa1\xd1\xdb\x04\x8f=\x05B\xfao\x9b\xcb3\xe2O\r8\xff#T\x03\xfed\xa0F\xd0_#\xe8\xab\x16\xac\x87\rw\x83\x19\xb0t\x85\xc8\x18\x12\xe2\\L\xe4\xbb\xcbK\x8b\xab\xab\xab\x0e\x87\x03\fe\xa8\x90ի\x8b\x03\xe4\a\xd2af\xe7$}\xee\xaas\a\xc3?==C\xc0\xe20\xa9\xe7@JE\xca<\xe7\v@\x01\xc0,6\xa28\x8b\b}\xa9\xb9\t\f\xd2\xeb\xf3)U\x15\x15r^\x93\x96\x1e8\xff\xba\x962\xb3`\xc9I \xd0\rf\nSSӽ==n\xa7\xfd\xd33\x1f6ki\x1b\x8b\x1c\x88\xf4W\v0\x99I\xaezO\x95R\f\xf2\xdc&\x1d\xb33`\xfd\xb9\xb7\xbf\x1f\xbf\xf7\x168}BRR\x98\x9c\x9c\x12\x10S\xc1\xb2\x04\xf8\xed \x04\x02\xb9\xc9%\x03\xa7\xc3\xc2\xeb\xb4pz\x1e\x86\xfcǈN$,H\u0380\xc1\xe5\xf22\xbd^\xafRU|\xf5\xd57\xc1\xccBH\xc7\xf5U\xf3\xbb\x1f\x9e\xe4g\v\b\xc5iE\x84\x1f\x8c\xb1\xb1\xd1l\xb6\xae\x04Qf1\xe9\xb5Vq\xbe/`7\x18\xbc\f\u05c9\x93\xa3#\xc6\xc7\xc7A\x10\xd8\xd4\xd4\xe4v\aeγ3\xb38D\x02\xf09;\xc6\x0fL\xa00\xf3\\\\\xecy\xa7\xd3\xd9\xd0\xe0\x99\x9e\x9e\x0e\x86\u007fii\xb9\xc6jp\xca\v\x02\xb7\xe2 \x05\x98\x9b\x8a\x8e\x8c\x8b\xbd\x10\xaap\xee\xea\xc8\x15\x9d\x88\xd4W\x1d\x9a-\xb8\xebl\x05\x1b\x85\x88\xed:\xb4\x19\x99/\xbc\xf0b\xa8\xf8A~Z)\xe79\xcbB\xb0\x05`\x84K:\xbaY\x94o\x93\xe2\xc0\x14z\xb7\x19p\xb0N\xf2\xec3\xbf\xf2\xfbC\x96\x17[,\xb6r\x16z\xcb\x04\xf0\xa1d\xd0)$\xa23\xec\x0e\x87\xd9l\xe60\xa9z!~\xcb)\fՉ\x8f\x1fzm\xe4\xea7!\xcch$<\xa6[M\t\x92\xbf\xd7\xc6Q\xcbE?\x945VW\xadZE\xad\x82\xf4\xe0\xb6\x02\x13\x8e\x8b\xfc\x87\xd7\xdb\x1cB\xfeɩ\x19\x061\xbb\xcb\x1a\xd4\x16(K\x10\xa5\"ng{K\xff\xc0\xd0\xec\xf5\x1bE\x05\x18{)\xf1A\xfe\xbe\x1a!\x16\x1e%\x93\x95\x856\x1d\xf6x\x9a\x10\xe7O_vK\u007f\x1e|\x053\x87\x92\x13_\xc5\xc7\x1aE\x04)\x03\xa7\x94qKKr[\r\x8c-\xd31\x05\r\x89\xc6\xe0B\x9eѧ\xa5\xc0\xd9\u0604@\xb2\xdaM\xd2e\xe5y5\xb4K:Ɔ\xd9\x02\x0f\x03\xb4\x11\x04\x9c[\xfa\x04\xf0\xa6[E)( CP\x02\xf5\x1f\xfd\xfb\xeb\x83\x0f\xcf\xff\xb0\x02fJ$\x92\xa1(\xaa8l6\x16\xe6\"\b\xfe!\f\x81\xec<O%M\xa9TC\xc1\x0f\u0092\xe2\xfc\x8c~(#\n\xc0\xdfXU\"\x91ʡ\xe0\xf7\xcf\xcdi\xe4B\xaf\x86\x02]D\x01\xf8\x81\xb1\x10\b\x85Д\xa3\xef\x18\xb5\x15\x02Bb\xa8\"\x8a-\xa5Y\xcb\xc8\xc7\x12 *\x8a\x1a\r\xc6\xf4\xd8\b\xe8L`\xc3\xff\xd0hL\x88\xf8[Z\xdbPiqm\x06&D\xfc\xc0\xc7\xeax\x18\x99\\\x05ٵ\xe9\x04.7\xdd.\xc5Cd\x02 \x84\xa6\xe4\x9c\xef\xec\x82\xeaji\xee\xf6B\x11\x01\xa3\xe3\xa2 \xe2\a\x9a\x89\xbc\x189::\x01ݽ\x00\x8fI\xad\xe2\xe4B\xc4?T'\t\u007f\xfb\x8dť;\xd0\xf1W($F\x01\x06\"\xfe\xc1Zq\xf8\xbb\xef@z\xa9g3hl\xb2\x82\x8d\xcb\xeb\x90;\u007f\x10\x17\xc5\xc6\xc4C\xcao7U\xd9\x01?$\xca/b\xe7_T\x96\xab \xe5\xb7\x1a*mRH\xd6\x1f(\xff\x17\x9f\x9e\x18\x19\xf9\x1aR~1\x9f\xad\x85\xc6\xff\xf4\xdayi\x17c::;\a\x06\x06fff \xe2\x17q\xe9P\xf8O`\xb9\\\\b˥\xf5\"0\xe0oh\xf0\x04Y\xcbݮi\x95R\x8b\x18\x1bZ\xfd\x01iWS\x15\xf5\xfd\xe3\x87FFF\xee\xe6\x1a7i4Zww\x0f\x14\xfc\xaej\xb3SQ\x14Z\xfb\xed\xb2pP\xa9\xd1v{\x8d\xc1`\xe2px\xf3\xf3\xf3t:sff\x16\n~\x8f\xc7[\xa3,\t!\xfc\x97&6=?͠\xff\xe1\x16\xb5\xb9\xb9\x05\xe4/##W!\xd2\xff\x91\xab_3I9\xedFV\b\xcaqv~CE1\xaf0\xc7bq\xecد\x98ܮ\x06rQ\xd1\xfa\x11\x10\x84\t\x838ǫ)V\xb3\xd14b~wO\xff\xda\x0e\xb6\xe1\xe1+\xce:w^fj\xab\x9e\xfe3\xa6\x00\x0e\xa9^\aOA\xcb,!d\xebu\xda\xdb\xf3\x8bk;ۖ\x96\x96\xa6\xa7\xa7GG\xc7pY\xa9\xbdvN\x80\x17\x04`\xa6\x03\xb5\xe2\xe1:1\x17\xfbEvJ\xbc\xddb\x1a\x1b\x1d_{\xa4\r\x1c1ٰ\xc4\x1a9a\xc0)Z\xff\tJ\xf5ֵe\xf0&\xf0\xed\xadz\x06*)\xf2\xec\xa9\xf7\r:\xfd\xc2\xfc<HE\xd7\x1e\x836==\x93\x9e\x92\x8a\x83G\xf3\x99E\x99\xf0d5\v\xc4ռ.+\xb7\xd3\x02\x84\xd3a洛\xd8\n\x1a\xf2\xdcG\xefD\x9e>\xd3\xdcܶ\xf6\xf8\xb5\x95\x95\xd5\nM\xd5\xe4\xe4\xfa\xedy}\x83'9:®\xa0\n\xc9\xd9\xec\x02D!\x06A*\xc0K\xa5\n\xbf\u007f~\xedqm\xc3×\xdbۿ\xdcx\xed\xf56Ri\x8c\xaen_wo\xdfwߍ\xaf=\xf6\xcd\xef\xf7\xdbl\x8e\x89\x89\x89\xbb\xa9\xf1\x18Du3\xe8\xda\xe4\xe4$\x93\xc9joo\a\xaf\xb1X\xfc\xe2\xe2\xe2\xff\x16?p#\x1d\x1d\x9d\x04\x02!**Z\xaf7\xef\xd8\xf7\xfe+\x00\x00\xff\xff"

// Determine if image.DecodeConfig can decode the configuration of a raw PPM
// file.
func TestDecodeRawPPMConfig(t *testing.T) {
	r := flate.NewReader(bytes.NewBufferString(ppmRaw))
	defer r.Close()
	cfg, str, err := image.DecodeConfig(r)
	if err != nil {
		t.Fatal(err)
	}
	if str != "ppm" {
		t.Fatalf("Expected \"ppm\" but received %q", str)
	}
	if cfg.Width != 64 || cfg.Height != 64 {
		t.Fatalf("Expected a 64x64 image but received %dx%d", cfg.Width, cfg.Height)
	}
}

// Determine if image.Decode can decode a raw PPM file.
func TestDecodeRawPPM(t *testing.T) {
	r := flate.NewReader(bytes.NewBufferString(ppmRaw))
	defer r.Close()
	img, str, err := image.Decode(r)
	if err != nil {
		t.Fatal(err)
	}
	if str != "ppm" {
		t.Fatalf("Expected ppm but received %s", str)
	}
	_, ok := img.(Image)
	if !ok {
		t.Fatal("Image is not a Netpbm image")
	}
}

// Determine if netpbm.DecodeConfig can decode the configuration of a raw PPM
// file.
func TestNetpbmDecodeRawPPMConfig(t *testing.T) {
	r := flate.NewReader(bytes.NewBufferString(ppmRaw))
	defer r.Close()
	cfg, err := DecodeConfig(r)
	if err != nil {
		t.Fatal(err)
	}
	if cfg.Width != 64 || cfg.Height != 64 {
		t.Fatalf("Expected a 64x64 image but received %dx%d", cfg.Width, cfg.Height)
	}
}

// Determine if netpbm.Decode can decode a raw PPM file.
func TestNetpbmDecodeRawPPM(t *testing.T) {
	r := flate.NewReader(bytes.NewBufferString(ppmRaw))
	defer r.Close()
	img, err := Decode(r, nil)
	if err != nil {
		t.Fatal(err)
	}
	if img.Format() != PPM {
		t.Fatalf("Expected PPM but received %s", img.Format())
	}
}

// Determine if netpbm.Decode can decode a raw PPM file with non-default
// options.
func TestNetpbmDecodeRawPPMOpts(t *testing.T) {
	r := flate.NewReader(bytes.NewBufferString(ppmRaw))
	defer r.Close()
	img, err := Decode(r, &DecodeOptions{
		Target: PPM,
		Exact: true,
	})
	if err != nil {
		t.Fatal(err)
	}
	if img.Format() != PPM {
		t.Fatalf("Expected PPM but received %s", img.Format())
	}
}
